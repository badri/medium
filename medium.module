<?php

/**
 * @file
 * Provides a WYSIWYG editor like Medium.com.
 */

/**
 * Implements hook_field_widget_info().
 */
function medium_field_widget_info() {
  return array(
    'field_medium_editor' => array(
      'label' => t('Medium editor'),
      'field types' => array('text_long')
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function medium_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'field_medium_editor':
      // Start with the normal text_textarea widget.
      $instance['widget']['type'] = 'text_textarea';
      $instance['widget']['settings']['rows'] = 1;
      $element = text_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      $element['#attributes'] = array(
        'class' => array('editable'),
        'placeholder' => $element['#title'],
      );
      $element['#resizable'] = FALSE;
      $element['#attached'] = array(
        // Setting the library key here so that if we DO need to load the Media
        // browser, it'll be first in the array and will be loaded first.
        'library' => array(),
        'js' => array(
          drupal_get_path('module', 'medium') . '/medium.js',
        ),
        'css' => array(
          drupal_get_path('module', 'medium') . '/medium.css',
        ),
      );
      libraries_load('mediumeditor');

      // Add media support if the Media module is enabled.
      if (module_exists('media')) {
        libraries_load('medium-editor-insert-plugin');
        $element['#attached']['js'][] = drupal_get_path('module', 'medium') . '/medium-media.js';

        // Add the Media browser info.
        module_load_include('inc', 'media', 'includes/media.browser');
        media_attach_browser_js($element);

        // Add configuration for the Media browser popup.
        $element['#attached']['js'][] = array(
          'data' => array(
            'medium' => array(
              'media_support' => TRUE,
              'types' => array(
                'image' => 'image',
              ),
              'enabledPlugins' => array(
                'upload' => 'upload',
                'media_default--media_browser_1' => 'media_default--media_browser_1',
                'media_default--media_browser_my_files' => 'media_default--media_browser_my_files'
              ),
              'schemes' => array('public' => 'public'),
              'file_directory' => '',
              'file_extensions' => 'png gif jpg jpeg',
              'max_filesize' => '',
              'uri_scheme' => 'public',
            ),
          ),
          'type' => 'setting',
        );
      }
      else {
        // Even if we don't have Media support, the frontend still needs to know.
        $element['#attached']['js'][] = array(
          'data' => array(
            'medium' => array(
              'media_support' => TRUE,
            ),
          ),
          'type' => 'setting',
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_libraries_info().
 */
function medium_libraries_info() {
  // Main medium editor library.
  $libraries['mediumeditor'] = array(
    'name' => 'Medium Editor',
    'vendor url' => 'https://github.com/daviferreira/medium-editor',
    'download url' => 'https://github.com/daviferreira/medium-editor/releases',
    'version callback' => 'medium_get_package_version',
    'files' => array(
      'js' => array(
        'dist/js/medium-editor.min.js'
      ),
      'css' => array(
        'dist/css/medium-editor.min.css',
        'dist/css/themes/bootstrap.min.css'
      ),
    ),
  );

  // Medium Editor insert library (For media support)
  $libraries['medium-editor-insert-plugin'] = array(
    'name' => 'Medium Editor Insert Plugin',
    'vendor url' => 'https://github.com/orthes/medium-editor-insert-plugin',
    'download url' => 'https://github.com/orthes/medium-editor-insert-plugin/releases',
    'version callback' => 'medium_get_package_version',
    'files' => array(
      'css' => array(
        'dist/css/medium-editor-insert-plugin.min.css'
      ),
      'js' => array(
        'dist/js/addons/medium-editor-insert-plugin.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Version callback for Libraries API.
 */
function medium_get_package_version($library) {
  $file = DRUPAL_ROOT . '/' . $library['library path'] . '/package.json';
  $package_info = json_decode(file_get_contents($file));
  return $package_info->version;
}
